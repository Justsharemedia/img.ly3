{
  "version": 3,
  "sources": ["../src/constants.ts", "../src/utils.ts", "../src/enableFeatures.ts", "../src/processBackgroundRemoval.ts", "../src/registerComponents.ts", "../src/plugin.ts", "../src/index.ts"],
  "sourcesContent": ["export const PLUGIN_ID = '@imgly/plugin-background-removal-web';\nexport const CANVAS_MENU_COMPONENT_ID = `${PLUGIN_ID}.canvasMenu`;\nexport const CANVAS_MENU_COMPONENT_BUTTON_ID = `${CANVAS_MENU_COMPONENT_ID}.button`;\nexport const FEATURE_ID = `${PLUGIN_ID}.feature`;\n", "import type CreativeEditorSDK from '@cesdk/cesdk-js';\nimport isEqual from 'lodash/isEqual';\n\nimport { PLUGIN_ID } from './constants';\nimport {\n  PluginStatusError,\n  PluginStatusMetadata,\n  PluginStatusProcessed,\n  PluginStatusProcessing\n} from './types';\n\n/**\n * Sets the metadata for the plugin state.\n */\nexport function setPluginMetadata(\n  cesdk: CreativeEditorSDK,\n  id: number,\n  metadata: PluginStatusMetadata\n) {\n  cesdk.engine.block.setMetadata(id, PLUGIN_ID, JSON.stringify(metadata));\n}\n\n/**\n * Returns the current metadata for the plugin state. If no metadata\n * is set on the given block, it will return an IDLE state.\n */\nexport function getPluginMetadata(\n  cesdk: CreativeEditorSDK,\n  id: number\n): PluginStatusMetadata {\n  if (cesdk.engine.block.hasMetadata(id, PLUGIN_ID)) {\n    return JSON.parse(cesdk.engine.block.getMetadata(id, PLUGIN_ID));\n  } else {\n    return {\n      status: 'IDLE'\n    };\n  }\n}\n\n/**\n * If plugin metadata is set, it will be cleared.\n */\nexport function clearPluginMetadata(cesdk: CreativeEditorSDK, id: number) {\n  if (cesdk.engine.block.hasMetadata(id, PLUGIN_ID)) {\n    cesdk.engine.block.removeMetadata(id, PLUGIN_ID);\n  }\n}\n\n/**\n * Detect if the block has been duplicated with processed or processing\n * background removal. In that case the background removal state is still\n * valid, but blockId and fillId have changed.\n */\nexport function isDuplicate(\n  cesdk: CreativeEditorSDK,\n  blockId: number,\n  metadata: PluginStatusMetadata\n): boolean {\n  if (!cesdk.engine.block.isValid(blockId)) return false;\n  if (\n    metadata.status === 'IDLE' ||\n    metadata.status === 'PENDING' ||\n    metadata.status === 'ERROR'\n  )\n    return false;\n\n  if (!cesdk.engine.block.hasFill(blockId)) return false;\n  const fillId = cesdk.engine.block.getFill(blockId);\n\n  // It cannot be a duplicate if the blockId or fillId are the same\n  if (metadata.blockId === blockId || metadata.fillId === fillId) return false;\n\n  return true;\n}\n\n/**\n * Fixes the metadata if the block has been duplicated, i.e. the blockId and\n * fillId will be updated to the current block/fill.\n *\n * Please note: Call this method only on duplicates (see isDuplicate).\n */\nexport function fixDuplicateMetadata(\n  cesdk: CreativeEditorSDK,\n  blockId: number\n) {\n  const fillId = cesdk.engine.block.getFill(blockId);\n  const metadata = getPluginMetadata(cesdk, blockId);\n  if (\n    metadata.status === 'IDLE' ||\n    metadata.status === 'PENDING' ||\n    metadata.status === 'ERROR'\n  )\n    return;\n  setPluginMetadata(cesdk, blockId, {\n    ...metadata,\n    blockId,\n    fillId\n  });\n}\n\n/**\n * Check if the image has a consisten metadata state. A inconsistent state is\n * caused by outside changes of the fill data.\n *\n * @returns true if the metadata is consistent, false otherwise\n */\nexport function isMetadataConsistent(\n  cesdk: CreativeEditorSDK,\n  blockId: number\n): boolean {\n  // In case the block was removed, we just abort and mark it\n  // as reset by returning true\n  if (!cesdk.engine.block.isValid(blockId)) return false;\n  const metadata = getPluginMetadata(cesdk, blockId);\n  if (metadata.status === 'IDLE' || metadata.status === 'PENDING') return true;\n\n  if (!cesdk.engine.block.hasFill(blockId)) return false;\n  const fillId = cesdk.engine.block.getFill(blockId);\n  if (fillId == null) return false;\n\n  if (blockId !== metadata.blockId || fillId !== metadata.fillId) return false;\n\n  const sourceSet = cesdk.engine.block.getSourceSet(\n    fillId,\n    'fill/image/sourceSet'\n  );\n  const imageFileURI = cesdk.engine.block.getString(\n    fillId,\n    'fill/image/imageFileURI'\n  );\n\n  if (\n    sourceSet.length === 0 &&\n    !imageFileURI &&\n    metadata.status === 'PROCESSING'\n  ) {\n    // While we process it is OK to have no image file URI and no source set\n    // (which we cleared to show the spinning loader)\n    return true;\n  }\n\n  // Source sets have precedence over imageFileURI so if we have a source set,\n  // we only need to check if it has changed to something else.\n  if (sourceSet?.length > 0) {\n    const initialSourceSet = metadata.initialSourceSet;\n    // If we have already processed the image, we need to check if the source set\n    // we need to check against both source sets, the removed and the initial\n    if (metadata.status === 'PROCESSED') {\n      const removedBackground = metadata.removedBackground;\n      if (\n        !isEqual(sourceSet, removedBackground) &&\n        !isEqual(sourceSet, initialSourceSet)\n      ) {\n        return false;\n      }\n    } else {\n      if (!isEqual(sourceSet, initialSourceSet)) {\n        return false;\n      }\n    }\n  } else {\n    if (metadata.status === 'PROCESSED') {\n      if (\n        imageFileURI !== metadata.initialImageFileURI &&\n        imageFileURI !== metadata.removedBackground\n      ) {\n        return false;\n      }\n    } else {\n      if (imageFileURI !== metadata.initialImageFileURI) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/**\n * Recover the initial values to avoid the loading spinner and have the same\n * state as before the background removal was started.\n */\nexport function recoverInitialImageData(\n  cesdk: CreativeEditorSDK,\n  blockId: number\n) {\n  const blockApi = cesdk.engine.block;\n  if (!blockApi.hasFill(blockId)) return; // Nothing to recover (no fill anymore)\n\n  const metadata = getPluginMetadata(cesdk, blockId);\n\n  if (metadata.status === 'PENDING' || metadata.status === 'IDLE') {\n    return;\n  }\n\n  const initialSourceSet = metadata.initialSourceSet;\n  const initialImageFileURI = metadata.initialImageFileURI;\n  const initialPreviewFileURI = metadata.initialPreviewFileURI;\n\n  const fillId = getValidFill(cesdk, blockId, metadata);\n  if (fillId == null) return;\n\n  if (initialImageFileURI) {\n    cesdk.engine.block.setString(\n      fillId,\n      'fill/image/imageFileURI',\n      initialImageFileURI\n    );\n  }\n  if (initialPreviewFileURI) {\n    cesdk.engine.block.setString(\n      fillId,\n      'fill/image/previewFileURI',\n      initialPreviewFileURI\n    );\n  }\n  if (initialSourceSet.length > 0) {\n    cesdk.engine.block.setSourceSet(\n      fillId,\n      'fill/image/sourceSet',\n      initialSourceSet\n    );\n  }\n}\n\n/**\n * Returns the fill id of the block if it has a valid fill that was used for\n * background removal. Returns undefined otherwise.\n */\nfunction getValidFill(\n  cesdk: CreativeEditorSDK,\n  blockId: number,\n  metadata: PluginStatusProcessing | PluginStatusError | PluginStatusProcessed\n): number | undefined {\n  if (\n    !cesdk.engine.block.isValid(blockId) ||\n    !cesdk.engine.block.hasFill(blockId) ||\n    blockId !== metadata.blockId\n  ) {\n    return undefined;\n  }\n  const fillId = cesdk.engine.block.getFill(blockId);\n  if (fillId !== metadata.fillId) {\n    return undefined;\n  }\n\n  return fillId;\n}\n", "import type CreativeEditorSDK from '@cesdk/cesdk-js';\nimport { FEATURE_ID } from './constants';\nimport { getPluginMetadata } from './utils';\n\n/**\n * Defines the feature that determines in which context (on which block)\n * background removal is allowed/enabled.\n */\nexport function enableFeatures(cesdk: CreativeEditorSDK) {\n  cesdk.feature.unstable_enable(FEATURE_ID, ({ engine }) => {\n    const selectedIds = engine.block.findAllSelected();\n    if (selectedIds.length !== 1) {\n      return false;\n    }\n    const [selectedId] = selectedIds;\n\n    if (cesdk.engine.block.hasFill(selectedId)) {\n      const fillId = cesdk.engine.block.getFill(selectedId);\n      const fillType = cesdk.engine.block.getType(fillId);\n\n      if (fillType !== '//ly.img.ubq/fill/image') {\n        return false;\n      }\n\n      const fileUri = engine.block.getString(fillId, 'fill/image/imageFileURI');\n      const sourceSet = engine.block.getSourceSet(\n        fillId,\n        'fill/image/sourceSet'\n      );\n\n      if (sourceSet.length > 0 || fileUri !== '') return true;\n\n      // If we are in a processing state we do not have a imageFileURI or\n      // source set set (to show the loading spinner), but the feature is still\n      // enabled.\n      const metadata = getPluginMetadata(cesdk, selectedId);\n      return metadata.status === 'PROCESSING';\n    }\n\n    return false;\n  });\n}\n", "import type CreativeEditorSDK from '@cesdk/cesdk-js';\nimport { type Source } from '@cesdk/cesdk-js';\nimport {\n  applySegmentationMask,\n  segmentForeground,\n  type Config\n} from '@imgly/background-removal';\n\nimport throttle from 'lodash/throttle';\n\nimport {\n  getPluginMetadata,\n  isMetadataConsistent,\n  recoverInitialImageData,\n  setPluginMetadata\n} from './utils';\n\n/**\n * Triggers the background removal process.\n */\nexport async function processBackgroundRemoval(\n  cesdk: CreativeEditorSDK,\n  blockId: number,\n  configuration: Config\n) {\n  const blockApi = cesdk.engine.block;\n  if (!blockApi.hasFill(blockId))\n    throw new Error('Block has no fill to remove the background from');\n\n  const fillId = blockApi.getFill(blockId);\n\n  // Get the current image URI and source set as initial values.\n  const initialSourceSet = blockApi.getSourceSet(\n    fillId,\n    'fill/image/sourceSet'\n  );\n  const initialImageFileURI = blockApi.getString(\n    fillId,\n    'fill/image/imageFileURI'\n  );\n  const initialPreviewFileURI = blockApi.getString(\n    fillId,\n    'fill/image/previewFileURI'\n  );\n\n  try {\n    // Clear values in the engine to trigger the loading spinner\n    blockApi.setString(fillId, 'fill/image/imageFileURI', '');\n    blockApi.setSourceSet(fillId, 'fill/image/sourceSet', []);\n\n    const metadata = getPluginMetadata(cesdk, blockId);\n    setPluginMetadata(cesdk, blockId, {\n      ...metadata,\n      version: PLUGIN_VERSION,\n      initialSourceSet,\n      initialImageFileURI,\n      initialPreviewFileURI,\n      blockId,\n      fillId,\n      status: 'PROCESSING'\n    });\n\n    const uriToProcess =\n      // Source sets have priority in the engine\n      initialSourceSet.length > 0\n        ? // Choose the highest resolution image in the source set\n          initialSourceSet.sort(\n            (a, b) => b.width * b.height - a.height * a.width\n          )[0].uri\n        : initialImageFileURI;\n\n    // If there is no initial preview file URI, set the current URI.\n    // It will be used as the image displayed while showing the loading spinner.\n    if (!initialPreviewFileURI) {\n      blockApi.setString(fillId, 'fill/image/previewFileURI', uriToProcess);\n    }\n\n    // Creating the mask from the highest resolution image\n    const mask = await segmentForeground(uriToProcess, configuration);\n\n    if (initialSourceSet.length > 0) {\n      // Source set code path\n      // ====================\n      const uploaded = await maskSourceSet<Source>(\n        cesdk,\n        blockId,\n        initialSourceSet,\n        mask,\n        configuration\n      );\n      if (uploaded == null) return;\n\n      if (uploaded.every((url) => url == null)) {\n        throw new Error('Could not upload any BG removed image');\n      }\n\n      const newSourceSet = initialSourceSet.map((source, index) => {\n        return {\n          ...source,\n          uri: uploaded[index]\n        };\n      });\n\n      setPluginMetadata(cesdk, blockId, {\n        version: PLUGIN_VERSION,\n        initialSourceSet,\n        initialImageFileURI,\n        initialPreviewFileURI,\n        blockId,\n        fillId,\n        status: 'PROCESSED',\n        removedBackground: newSourceSet\n      });\n      blockApi.setSourceSet(fillId, 'fill/image/sourceSet', newSourceSet);\n      // TODO: Generate a thumb/preview uri\n      blockApi.setString(fillId, 'fill/image/previewFileURI', '');\n    } else {\n      // ImageFileURI code path\n      // ======================\n      const uploaded = await maskSourceSet<{ uri: string }>(\n        cesdk,\n        blockId,\n        [{ uri: uriToProcess }],\n        mask,\n        configuration\n      );\n      if (uploaded == null) return;\n\n      const uploadedUrl = uploaded[0];\n      if (uploadedUrl == null) {\n        throw new Error('Could not upload BG removed image');\n      }\n\n      setPluginMetadata(cesdk, blockId, {\n        version: PLUGIN_VERSION,\n        initialSourceSet,\n        initialImageFileURI,\n        initialPreviewFileURI,\n        blockId,\n        fillId,\n        status: 'PROCESSED',\n        removedBackground: uploadedUrl\n      });\n      blockApi.setString(fillId, 'fill/image/imageFileURI', uploadedUrl);\n      // TODO: Generate a thumb/preview uri\n      blockApi.setString(fillId, 'fill/image/previewFileURI', '');\n    }\n    // Finally, create an undo step\n    cesdk.engine.editor.addUndoStep();\n  } catch (error) {\n    if (cesdk.engine.block.isValid(blockId)) {\n      setPluginMetadata(cesdk, blockId, {\n        version: PLUGIN_VERSION,\n        initialSourceSet,\n        initialImageFileURI,\n        initialPreviewFileURI,\n        blockId,\n        fillId,\n        status: 'ERROR'\n      });\n\n      recoverInitialImageData(cesdk, blockId);\n    }\n    // eslint-disable-next-line no-console\n    console.log(error);\n  }\n}\n\nasync function maskSourceSet<T extends { uri: string }>(\n  cesdk: CreativeEditorSDK,\n  blockId: number,\n  urisOrSources: T[],\n  mask: Blob,\n  configurationFromArgs: Config\n): Promise<string[] | undefined> {\n  const configuration = {\n    ...configurationFromArgs,\n    progress: throttle((key, current, total) => {\n      const metadataDuringProgress = getPluginMetadata(cesdk, blockId);\n      if (\n        metadataDuringProgress.status !== 'PROCESSING' ||\n        !isMetadataConsistent(cesdk, blockId)\n      )\n        return;\n      configurationFromArgs.progress?.(key, current, total);\n      setPluginMetadata(cesdk, blockId, {\n        ...metadataDuringProgress,\n        progress: { key, current, total }\n      });\n    }, 100)\n  };\n\n  const masked = await Promise.all(\n    urisOrSources.map(async (source): Promise<[Blob, T]> => {\n      // Applying the mask to the original image\n      const blob = await applySegmentationMask(source.uri, mask, configuration);\n      return [blob, source];\n    })\n  );\n\n  // Check for externally changed state while we were applying the mask and\n  // do not proceed if the state was reset.\n  if (\n    getPluginMetadata(cesdk, blockId).status !== 'PROCESSING' ||\n    !isMetadataConsistent(cesdk, blockId)\n  )\n    return;\n\n  const uploaded = await Promise.all(\n    masked.map(async ([blob, source]): Promise<[string, T]> => {\n      const pathname = new URL(source.uri).pathname;\n      const parts = pathname.split('/');\n      const filename = parts[parts.length - 1];\n\n      const uploadedAssets = await cesdk.unstable_upload(\n        new File([blob], filename, { type: blob.type }),\n        () => {\n          // TODO Delegate process to UI component\n        }\n      );\n\n      const url = uploadedAssets.meta?.uri;\n      if (url == null) {\n        throw new Error('Could not upload BG removed image');\n      }\n      return [url, source];\n    })\n  );\n\n  // Check for externally changed state while we were uploading and\n  // do not proceed if the state was reset.\n  if (\n    getPluginMetadata(cesdk, blockId).status !== 'PROCESSING' ||\n    !isMetadataConsistent(cesdk, blockId)\n  )\n    return;\n\n  return uploaded.map(([url]) => url);\n}\n", "import type CreativeEditorSDK from '@cesdk/cesdk-js';\n\nimport {\n  CANVAS_MENU_COMPONENT_BUTTON_ID,\n  CANVAS_MENU_COMPONENT_ID,\n  FEATURE_ID,\n  PLUGIN_ID\n} from './constants';\nimport { Location, UserInterfaceConfiguration } from './types';\nimport { getPluginMetadata, setPluginMetadata } from './utils';\n\nconst REMOVE_BACKGROUND_ACTION_I18N_KEY = `plugin.${PLUGIN_ID}.action.removeBackground`;\n\n/**\n * Registers the components that can be used to remove the background of\n * a block.\n */\nexport function registerComponents(\n  cesdk: CreativeEditorSDK,\n  configuration: UserInterfaceConfiguration = {}\n) {\n  if (hasDefaultLocation('canvasMenu', configuration)) {\n    // Always prepend the registered component to the canvas menu order.\n    cesdk.ui.unstable_setCanvasMenuOrder([\n      CANVAS_MENU_COMPONENT_ID,\n      ...cesdk.ui.unstable_getCanvasMenuOrder()\n    ]);\n  }\n\n  cesdk.setTranslations({\n    en: {\n      [REMOVE_BACKGROUND_ACTION_I18N_KEY]: 'BG Removal'\n    }\n  });\n\n  cesdk.ui.unstable_registerComponent(\n    CANVAS_MENU_COMPONENT_ID,\n    ({ builder: { Button }, engine }) => {\n      if (\n        !cesdk.feature.unstable_isEnabled(FEATURE_ID, {\n          engine\n        })\n      ) {\n        return;\n      }\n\n      const [id] = engine.block.findAllSelected();\n\n      const metadata = getPluginMetadata(cesdk, id);\n\n      const isLoading = metadata.status === 'PROCESSING';\n      const isDisabled =\n        metadata.status === 'PENDING' || metadata.status === 'PROCESSING';\n\n      let loadingProgress: number | undefined;\n      if (isLoading && metadata.progress) {\n        const { key, current, total } = metadata.progress;\n\n        if (key === 'compute:inference') {\n          loadingProgress = undefined;\n        } else if (key.startsWith('fetch:/models/')) {\n          loadingProgress = (current / total) * 50;\n        } else if (key.startsWith('fetch:/onnxruntime-web/')) {\n          loadingProgress = 50 + (current / total) * 50;\n        } else {\n          loadingProgress = undefined;\n        }\n      }\n\n      Button(CANVAS_MENU_COMPONENT_BUTTON_ID, {\n        label: REMOVE_BACKGROUND_ACTION_I18N_KEY,\n        icon: '@imgly/icons/BGRemove',\n        isLoading,\n        isDisabled,\n        loadingProgress,\n        onClick: () => {\n          if (\n            metadata.status === 'IDLE' ||\n            metadata.status === 'ERROR' ||\n            metadata.status === 'PROCESSED'\n          ) {\n            setPluginMetadata(cesdk, id, {\n              status: 'PENDING'\n            });\n          }\n        }\n      });\n    }\n  );\n}\n\nfunction hasDefaultLocation(\n  location: Location,\n  configuration: UserInterfaceConfiguration\n) {\n  return (\n    configuration.locations &&\n    (Array.isArray(configuration.locations)\n      ? configuration.locations\n      : [configuration.locations]\n    ).includes(location)\n  );\n}\n", "import type CreativeEditorSDK from '@cesdk/cesdk-js';\n\nimport type { Config as BackgroundRemovalConfiguration } from '@imgly/background-removal';\nimport { FEATURE_ID, PLUGIN_ID } from './constants';\nimport { enableFeatures } from './enableFeatures';\nimport { processBackgroundRemoval } from './processBackgroundRemoval';\nimport { registerComponents } from './registerComponents';\nimport { UserInterfaceConfiguration } from './types';\nimport {\n  clearPluginMetadata,\n  fixDuplicateMetadata,\n  getPluginMetadata,\n  isDuplicate,\n  isMetadataConsistent\n} from './utils';\n\nexport interface PluginConfiguration {\n  ui?: UserInterfaceConfiguration;\n  backgroundRemoval?: BackgroundRemovalConfiguration;\n}\n\nexport default (pluginConfiguration: PluginConfiguration = {}) => {\n  const backgroundRemovalConfiguration: BackgroundRemovalConfiguration =\n    pluginConfiguration?.backgroundRemoval ?? {};\n\n  return {\n    initialize() {},\n\n    update() {},\n\n    initializeUserInterface({ cesdk }: { cesdk: CreativeEditorSDK }) {\n      cesdk.engine.event.subscribe([], async (events) => {\n        events.forEach((e) => {\n          const id = e.block;\n          if (\n            !cesdk.engine.block.isValid(id) ||\n            !cesdk.engine.block.hasMetadata(id, PLUGIN_ID)\n          ) {\n            return;\n          }\n\n          if (e.type === 'Created') {\n            const metadata = getPluginMetadata(cesdk, id);\n            if (isDuplicate(cesdk, id, metadata)) {\n              fixDuplicateMetadata(cesdk, id);\n            }\n          } else if (e.type === 'Updated') {\n            handleUpdateEvent(cesdk, id, backgroundRemovalConfiguration);\n          }\n        });\n      });\n\n      registerComponents(cesdk, pluginConfiguration.ui);\n      enableFeatures(cesdk);\n    }\n  };\n};\n\n/**\n * Handle every possible state of the background removal state if the block was\n * updated.\n */\nasync function handleUpdateEvent(\n  cesdk: CreativeEditorSDK,\n  blockId: number,\n  configuration: BackgroundRemovalConfiguration\n) {\n  const metadata = getPluginMetadata(cesdk, blockId);\n\n  switch (metadata.status) {\n    case 'PENDING': {\n      if (\n        cesdk.feature.unstable_isEnabled(FEATURE_ID, {\n          engine: cesdk.engine\n        })\n      ) {\n        processBackgroundRemoval(cesdk, blockId, configuration);\n      }\n      break;\n    }\n\n    case 'PROCESSING':\n    case 'PROCESSED': {\n      if (!isMetadataConsistent(cesdk, blockId)) {\n        clearPluginMetadata(cesdk, blockId);\n      }\n      break;\n    }\n\n    default: {\n      // We do not care about other states\n    }\n  }\n}\n", "import plugin, { type PluginConfiguration } from './plugin';\n\nimport { PLUGIN_ID } from './constants';\n\nconst Plugin = (pluginConfiguration?: PluginConfiguration) => ({\n  name: PLUGIN_ID,\n  version: PLUGIN_VERSION,\n  ...plugin(pluginConfiguration)\n});\n\nexport default Plugin;\n"],
  "mappings": "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",
  "names": ["PLUGIN_ID", "CANVAS_MENU_COMPONENT_ID", "CANVAS_MENU_COMPONENT_BUTTON_ID", "FEATURE_ID", "isEqual", "setPluginMetadata", "cesdk", "id", "metadata", "PLUGIN_ID", "getPluginMetadata", "clearPluginMetadata", "isDuplicate", "blockId", "fillId", "fixDuplicateMetadata", "isMetadataConsistent", "sourceSet", "imageFileURI", "initialSourceSet", "removedBackground", "isEqual", "recoverInitialImageData", "initialImageFileURI", "initialPreviewFileURI", "getValidFill", "enableFeatures", "cesdk", "FEATURE_ID", "engine", "selectedIds", "selectedId", "fillId", "fileUri", "getPluginMetadata", "applySegmentationMask", "segmentForeground", "throttle", "processBackgroundRemoval", "cesdk", "blockId", "configuration", "blockApi", "fillId", "initialSourceSet", "initialImageFileURI", "initialPreviewFileURI", "metadata", "getPluginMetadata", "setPluginMetadata", "uriToProcess", "a", "b", "mask", "segmentForeground", "uploaded", "maskSourceSet", "url", "newSourceSet", "source", "index", "uploadedUrl", "error", "recoverInitialImageData", "urisOrSources", "configurationFromArgs", "throttle", "key", "current", "total", "metadataDuringProgress", "isMetadataConsistent", "masked", "applySegmentationMask", "blob", "parts", "filename", "REMOVE_BACKGROUND_ACTION_I18N_KEY", "PLUGIN_ID", "registerComponents", "cesdk", "configuration", "hasDefaultLocation", "CANVAS_MENU_COMPONENT_ID", "Button", "engine", "FEATURE_ID", "id", "metadata", "getPluginMetadata", "isLoading", "isDisabled", "loadingProgress", "key", "current", "total", "CANVAS_MENU_COMPONENT_BUTTON_ID", "setPluginMetadata", "location", "plugin_default", "pluginConfiguration", "backgroundRemovalConfiguration", "cesdk", "events", "e", "id", "PLUGIN_ID", "metadata", "getPluginMetadata", "isDuplicate", "fixDuplicateMetadata", "handleUpdateEvent", "registerComponents", "enableFeatures", "blockId", "configuration", "FEATURE_ID", "processBackgroundRemoval", "isMetadataConsistent", "clearPluginMetadata", "Plugin", "pluginConfiguration", "PLUGIN_ID", "plugin_default", "src_default"]
}
